---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'php-hello'

Parameters:

  WebserverInstanceType:
    Type: String
    Default: t2.medium
    AllowedValues:
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - t3.nano
    - t3.micro
    - t3.small
    - t3.medium
    - t3.large
    - t3.xlarge
    - t3.2xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - m5.4xlarge
    - m5.12xlarge
    - m5.24xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - c5.9xlarge
    - c5.18xlarge
    - i3.large
    - i3.xlarge
    - i3.2xlarge
    - i3.4xlarge
    - i3.8xlarge
    - i3.16xlarge
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    - r4.8xlarge
    - r4.16xlarge
    - x1.16xlarge
    - x1.32xlarge
    - p2.xlarge
    - p2.8xlarge
    - p2.16xlarge
    - p3.2xlarge
    - p3.8xlarge
    - p3.16xlarge
    - r5.large
    - r5.xlarge
    - r5.2xlarge
    - r5.4xlarge
    - r5.12xlarge
    - r5.24xlarge
    - r5d.large
    - r5d.xlarge
    - r5d.2xlarge
    - r5d.4xlarge
    - r5d.12xlarge
    - r5d.24xlarge
    - z1d.large
    - z1d.xlarge
    - z1d.2xlarge
    - z1d.3xlarge
    - z1d.6xlarge
    - z1d.12xlarge
    ConstraintDescription: must be a valid EC2 instance type

  VpcName:
    Type: String
    Default: 'php-hello'
    Description: Name for the VPC

  VpcBlock:
    Type: String
    Default: 10.148.224.0/21
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$

  Subnet01Block:
    Type: String
    Default: 10.148.225.0/24
    Description: CidrBlock for subnet 01 within the VPC
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$

  Subnet02Block:
    Type: String
    Default: 10.148.226.0/24
    Description: CidrBlock for subnet 02 within the VPC
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$

  Subnet03Block:
    Type: String
    Default: 10.148.227.0/24
    Description: CidrBlock for subnet 03 within the VPC
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$

  Subnet04Block:
    Type: String
    Default: 10.148.228.0/24
    Description: CidrBlock for subnet 04 within the VPC
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$

  Subnet05Block:
    Type: String
    Default: 10.148.229.0/24
    Description: CidrBlock for subnet 05 within the VPC
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$

  Subnet06Block:
    Type: String
    Default: 10.148.230.0/24
    Description: CidrBlock for subnet 06 within the VPC
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$

  DBMasterUsername:
    Type: String 
    Default: 'supersecretusername'
    Description: Unique identifier for the Webserver Group.

  DBMasterPassword:
    Type: String 
    Default: 'supersecretpassword'
    Description: Unique identifier for the Webserver Group.

  DBMasterDatabase:
    Type: String 
    Default: 'phphello'
    Description: Unique identifier for the Webserver Group.

Mappings:

  AWSRegionToAMI:
    ap-northeast-1:
      AMI: ami-02115cef40fbb46a4
    ap-northeast-2:
      AMI: ami-00ca7ffe117e2fe91
    ap-south-1:
      AMI: ami-00b7e666605d33085
    ap-southeast-1:
      AMI: ami-03221428e6676db69
    ap-southeast-2:
      AMI: ami-059b78064586da1b7
    ca-central-1:
      AMI: ami-9526abf1
    eu-central-1:
      AMI: ami-027583e616ca104df
    eu-west-1:
      AMI: ami-0181f8d9b6f098ec4
    eu-west-2:
      AMI: ami-c7ab5fa0
    eu-west-3:
      AMI: ami-0370f4064dbc392b9
    sa-east-1:
      AMI: ami-08b78b890b5a86161
    us-east-1:
      AMI: ami-04169656fea786776
    us-east-2:
      AMI: ami-0552e3455b9bc8d50        
    us-west-1:
      AMI: ami-059e7901352ebaef8
    us-west-2:
      AMI: ami-51537029

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Ref VpcName

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  Eip01:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  Eip02:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  Eip03:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc

  NatGateway01:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt Eip01.AllocationId
      SubnetId: !Ref Subnet04
  
  NatGateway02:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt Eip02.AllocationId
      SubnetId: !Ref Subnet05

  NatGateway03:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt Eip03.AllocationId
      SubnetId: !Ref Subnet06

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PrivateRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute01:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway01
 
  PrivateRouteTable02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute02:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway02      

  PrivateRouteTable03:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute03:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable03
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway03 

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway      

  Subnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: Subnet01Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-Subnet01"

  Subnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: Subnet02Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-Subnet02"

  Subnet03:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 03
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: Subnet03Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-Subnet03"

  Subnet04:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 04
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: Subnet04Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-Subnet04"

  Subnet05:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 05
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: Subnet05Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-Subnet05"

  Subnet06:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 06
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: Subnet06Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-Subnet06"

  Subnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet01
      RouteTableId: !Ref PrivateRouteTable01
    DependsOn:
      - PrivateRoute01

  Subnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet02
      RouteTableId: !Ref PrivateRouteTable02
    DependsOn:
      - PrivateRoute02

  Subnet03RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet03
      RouteTableId: !Ref PrivateRouteTable03
    DependsOn:
      - PrivateRoute03

  Subnet04RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet04
      RouteTableId: !Ref PublicRouteTable
    DependsOn:
      - PublicRoute

  Subnet05RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet05
      RouteTableId: !Ref PublicRouteTable
    DependsOn:
      - PublicRoute

  Subnet06RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet06
      RouteTableId: !Ref PublicRouteTable
    DependsOn:
      - PublicRoute

  WebserverSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: php-hello-web
      GroupDescription: Webserver security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        SourceSecurityGroupId: !Ref ALBSecurityGroup

  WebserverGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: WebserverLaunchConfig
    Properties:
      DesiredCapacity: 2
      LaunchConfigurationName: !Ref WebserverLaunchConfig
      MinSize: 1
      MaxSize: 3
      TargetGroupARNs: 
      - !Ref ALBTargetGroup
      VPCZoneIdentifier:
      - !Ref Subnet01
      - !Ref Subnet02
      - !Ref Subnet03 
      Tags:
      - Key: Name
        Value: 'php-hello'
        PropagateAtLaunch: 'true'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '2'
        MaxBatchSize: '1'

  WebserverLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: DBInstance
    Properties:
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AMI ]
      InstanceType: !Ref WebserverInstanceType
      SecurityGroups:
      - !Ref WebserverSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 5
            VolumeType: gp2
            DeleteOnTermination: true
      UserData:
        Fn::Base64:
          Fn::Sub:
          - |
            #!/bin/bash -ex
            
            # apt stuff
            apt-get update -y
            apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

            # install docker-ce  
            apt-get update -y
            apt-get install -y docker-ce  
            
            # install docker-compose
            curl -L "https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
   
            # download files from github
            curl -O https://raw.githubusercontent.com/evfurman/php-hello/master/docker-compose.yml -o /root/
            curl -O https://raw.githubusercontent.com/evfurman/php-hello/master/hello.conf -o /root/
            curl -O https://raw.githubusercontent.com/evfurman/php-hello/master/hello.php -o /root/

            # add db credentials
            sed -i "s/db_host/${DBHost}/g" hello.php
            sed -i "s/db_name/${DBDatabase}/g" hello.php
            sed -i "s/db_user/${DBUsername}/g" hello.php
            sed -i "s/db_pass/${DBPassword}/g" hello.php

            # bring up the containers
            docker-compose -f docker-compose.yml up -d
          - {
            DBHost: !GetAtt DBInstance.Endpoint.Address,
            DBDatabase: !Ref DBMasterDatabase,    
            DBUsername: !Ref DBMasterUsername,
            DBPassword: !Ref DBMasterPassword
            }  

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: php-hello-alb
      GroupDescription: LoadBalancer security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: '0.0.0.0/0'

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup 
    Properties:
      Name: php-hello
      Port: 8080
      Protocol: HTTP
      Tags:
      - Key: Name
        Value: 'php-hello'
      VpcId: !Ref VPC

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward 
        TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: '80'
      Protocol: HTTP 

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: php-hello
      Scheme: internet-facing
      SecurityGroups: 
      - !Ref ALBSecurityGroup
      Tags:
      - Key: Name
        Value: 'php-hello'
      Subnets:
      - !Ref Subnet04
      - !Ref Subnet05
      - !Ref Subnet06 
      Type: application 

  DBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: php-hello-db
      GroupDescription: DB security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        SourceSecurityGroupId: !Ref WebserverSecurityGroup

  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupName: php-hello
      DBSubnetGroupDescription: RDS subnet group
      SubnetIds:
      - !Ref Subnet01
      - !Ref Subnet02
      - !Ref Subnet03  

  DBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage: '20'
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: '1'
      CopyTagsToSnapshot: true
      DBInstanceClass: db.t2.small
      DBName: !Ref DBMasterDatabase
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: postgres
      EngineVersion: 10.4
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword: !Ref DBMasterPassword
      PreferredBackupWindow: '10:00-10:30'
      PreferredMaintenanceWindow: 'sat:04:00-sat:04:30'
      StorageType: gp2
      VPCSecurityGroups:
      - !Ref DBSecurityGroup
